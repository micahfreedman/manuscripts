library(sp) #manipulationg spatial data
library(ggplot2)
library(devtools) #needed to download prism from github
library(reshape2) ##melting dataframes
library(dplyr) #data wrangling
library(raster) ##working with raster data
library(rgdal)
library(prism) ##prism data access
library(RANN) #includes functions for nearest neighbor mathcing
library(geosphere)
north_am <- getMap(resolution = 'low')
plot(north_am, xlim=range(-130,-35), ylim = range(-15,50))
points(monarch_records_summer$longitude,monarch_records$longitude,col='blue',cex=1,pch=20) #includes all records from Canada, USA, Mexico
points(monarch_records_summer$longitude,monarch_records_summer$longitude,col='blue',cex=1,pch=20) #includes all records from Canada, USA, Mexico
monarch_records_summer$latitude
monarch_records_summer$longitude
points(monarch_records_summer$longitude,monarch_records_summer$longitude*-1,col='blue',cex=1,pch=20) #includes all records from Canada, USA, Mexico
points(monarch_records_summer$longitude,monarch_records_summer$latitude,col='blue',cex=1,pch=20) #includes all records from Canada, USA, Mexico
immature_monarchs$observed_on_details.month
immature_monarchs$annotations
r <- getData("worldclim",var="bio",res=2.5) #takes a while to access data (file is 123.3 MB), and requires an internet connection
r2 <- r[[c(1:19)]]
names(r2) <- c("BIO1 = Annual Mean Temperature", "BIO2 = Mean Diurnal Range", "BIO3 = Isothermality",
"BIO4 = Temperature Seasonality", "BIO5 = Max Temperature of Warmest Month", "BIO6 = Min Temperature of Coldest Month", "BIO7 = Temperature Annual Range (BIO5-BIO6)", "BIO8 = Mean Temperature of Wettest Quarter", "BIO9 = Mean Temperature of Driest Quarter", "BIO10 = Mean Temperature of Warmest Quarter", "BIO11 = Mean Temperature of Coldest Quarter", "BIO12 = Annual Precipitation", "BIO13 = Precipitation of Wettest Month", "BIO14 = Precipitation of Driest Month", "BIO15 = Precipitation Seasonality (Coefficient of Variation)", "BIO16 = Precipitation of Wettest Quarter", "BIO17 = Precipitation of Driest Quarter", "BIO18 = Precipitation of Warmest Quarter", "BIO19 = Precipitation of Coldest Quarter") #rename columns to give their full names/descriptions
r <- getData("worldclim",var="bio",res=2.5) #takes a while to access data (file is 123.3 MB), and requires an internet connection
r <- getData("worldclim",var="bio",res=10) #takes a while to access data (file is 123.3 MB), and requires an internet connection
r2 <- r[[c(1:19)]]
names(r2) <- c("BIO1 = Annual Mean Temperature", "BIO2 = Mean Diurnal Range", "BIO3 = Isothermality",
"BIO4 = Temperature Seasonality", "BIO5 = Max Temperature of Warmest Month", "BIO6 = Min Temperature of Coldest Month", "BIO7 = Temperature Annual Range (BIO5-BIO6)", "BIO8 = Mean Temperature of Wettest Quarter", "BIO9 = Mean Temperature of Driest Quarter", "BIO10 = Mean Temperature of Warmest Quarter", "BIO11 = Mean Temperature of Coldest Quarter", "BIO12 = Annual Precipitation", "BIO13 = Precipitation of Wettest Month", "BIO14 = Precipitation of Driest Month", "BIO15 = Precipitation Seasonality (Coefficient of Variation)", "BIO16 = Precipitation of Wettest Quarter", "BIO17 = Precipitation of Driest Quarter", "BIO18 = Precipitation of Warmest Quarter", "BIO19 = Precipitation of Coldest Quarter") #rename columns to give their full names/descriptions
coords <- data.frame(x=monarch_records_summer$longitude,y=monarch_records_summer$latitude)
points <- SpatialPoints(coords, proj4string = r@crs)
monarch_records_summer <- na.omit(monarch_records_summer)
nrow(monarch_records_summer)
coords <- data.frame(x=monarch_records_summer$longitude,y=monarch_records_summer$latitude)
points <- SpatialPoints(coords, proj4string = r@crs)
values <- as.data.frame(extract(r2,points)) #takes a little while; this matches coordinates to their corresponding Bioclim data
cbind(monarch_records_summer, values)
monarch_records_summer <- cbind(monarch_records_summer, values)
monarch_records_summer$eastern.vs.western <- ifelse(monarch_records_summer$decimalLongitude < -107.5, 'western', 'eastern')
monarch_records_summer$eastern.vs.western <- ifelse(monarch_records_summer$longitude < -107.5, 'western', 'eastern')
monarch_records_summer$BIO10...Mean.Temperature.of.Warmest.Quarter
aggregate(BIO10...Mean.Temperature.of.Warmest.Quarter ~ eastern.vs.western, mean, monarch_records_summer)
aggregate(BIO10...Mean.Temperature.of.Warmest.Quarter ~ eastern.vs.western, FUN = mean, monarch_records_summer)
aggregate(BIO10...Mean.Temperature.of.Warmest.Quarter ~ eastern.vs.western, FUN = mean, monarch_records_summer[monarch_records_summer$latitude > 30,])
monarch_records_summer$resident <- ifelse(monarch_records_summer$lat < 31, 'resident', 'non-resident')
monarch_records_summer[monarch_records_summer$lat < 34 & monarch_records_summer$lat > 32 & monarch_records_summer$long < -116 & monarch_records_summer$long > -119 ,]$resident <- 'resident'
monarch_records_summer[monarch_records_summer$lat > 32 & monarch_records_summer$lat < 35 &
monarch_records_summer$long < -75 & monarch_records_summer$long > -80.8,]$resident <- 'resident'
monarch_records_summer[monarch_records_summer$lat < 31 & monarch_records_summer$lat > 28 & monarch_records_summer$long < -97 & monarch_records_summer$long > -105,]$resident <- 'non-resident'
monarch_records_summer <- cbind(monarch_records_summer, values)
monarch_records_summer$east.west <- ifelse(monarch_records_summer$long < -105, 'west', 'east')
monarch_records_summer[which(monarch_records_summer$long > -113.5 & monarch_records_summer$long < -105 & monarch_records_summer$lat >45 & monarch_records_summer$lat < 60),]$east.west <- 'east'
monarch_records_summer[which(monarch_records_summer$long > -114 & monarch_records_summer$long < -112 & monarch_records_summer$lat<47 & monarch_records_summer$lat > 45),]$east.west <- 'west'
monarch_records_summer[which(monarch_records_summer$long > -106 & monarch_records_summer$long < -104 & monarch_records_summer$lat<41 & monarch_records_summer$lat >39 ),]$east.west <- 'east'
monarch_records_summer$resident <- ifelse(monarch_records_summer$lat < 31, 'resident', 'non-resident')
monarch_records_summer[monarch_records_summer$lat < 34 & monarch_records_summer$lat > 32 & monarch_records_summer$long < -116 & monarch_records_summer$long > -119 ,]$resident <- 'resident'
monarch_records_summer[monarch_records_summer$lat > 32 & monarch_records_summer$lat < 35 &
monarch_records_summer$long < -75 & monarch_records_summer$long > -80.8,]$resident <- 'resident'
monarch_records_summer[monarch_records_summer$lat < 31 & monarch_records_summer$lat > 28 & monarch_records_summer$long < -97 & monarch_records_summer$long > -105,]$resident <- 'non-resident'
monarch_records_summer$east.west
ggplot(monarch_records_summer[monarch_records_summer$east.west!='resident',], aes(x = BIO18...Precipitation.of.Warmest.Quarter, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='western',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='eastern',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('BIO18 - Precipitation of Warmest Quarter')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
monarch_records_summer
monarch_records_summer$east.west
levels(monarch_records_summer$east.west)
unique(monarch_records_summer$east.west)
ggplot(monarch_records_summer[monarch_records_summer$resident!='resident',], aes(x = BIO18...Precipitation.of.Warmest.Quarter, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='western',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='eastern',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('BIO18 - Precipitation of Warmest Quarter')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
monarch_records_summer$resident
ggplot(monarch_records_summer[monarch_records_summer$resident!='resident',], aes(x = BIO18...Precipitation.of.Warmest.Quarter, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)
monarch_records_summer[monarch_records_summer$resident!='resident',]
ggplot(monarch_records_summer[monarch_records_summer$resident!='resident',], aes(x = BIO18...Precipitation.of.Warmest.Quarter, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='west',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='east',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('BIO18 - Precipitation of Warmest Quarter')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
ggplot(monarch_records_summer[monarch_records_summer$resident!='resident',], aes(x = BIO18...Precipitation.of.Warmest.Quarter, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))
names(monarch_records_summer)
##  Now group altogether
immature_monarchs <- rbind(monarchs_pupae, monarchs_larvae_june, monarchs_larvae_july, monarchs_larvae_august, monarchs_eggs)
monarch_records <- immature_monarchs[,colnames(immature_monarchs) %in% c('quality_grade', 'observed_on', 'captive', 'location')]
monarch_records$latitude <- as.numeric(gsub(",.*$", "", monarch_records$location))
monarch_records$longitude <- as.numeric(sub('.*,', '', monarch_records$location))
monarch_records <- monarch_records[monarch_records$quality_grade=='research' & monarch_records$captive==FALSE,]
monarch_records$year <- as.numeric(substr(monarch_records$observed_on, 1, 4))
hist(monarch_records$year, breaks = 50) #can see exponential increase in observations
monarch_records$month <- as.numeric(trimws(sub("^[^-]*-([^-]*)-.*$", "\\1", monarch_records$observed_on)))
hist(monarch_records$month) #as expected, vast majority of records are in June, July, August
monarch_records$day <- as.numeric(sub('.*\\-', '', monarch_records$observed_on))
hist(monarch_records$day) #as expected, no real pattern based on day of the month
monarch_records_summer <- monarch_records[monarch_records$month %in% c(6,7,8),]
library(rworldmap)
library(raster)
library(sp) #manipulationg spatial data
library(ggplot2)
library(devtools) #needed to download prism from github
library(reshape2) ##melting dataframes
library(dplyr) #data wrangling
library(raster) ##working with raster data
library(rgdal)
library(prism) ##prism data access
library(RANN) #includes functions for nearest neighbor mathcing
library(geosphere)
north_am <- getMap(resolution = 'low')
plot(north_am, xlim=range(-130,-35), ylim = range(-15,50))
points(monarch_records_summer$longitude,monarch_records_summer$latitude,col='blue',cex=1,pch=20) #includes all records regardless of location
monarch_records_summer <- cbind(monarch_records_summer, values)
monarch_records_summer <- na.omit(monarch_records_summer)
monarch_records_summer <- cbind(monarch_records_summer, values)
monarch_records_summer$east.west <- ifelse(monarch_records_summer$long < -105, 'west', 'east')
monarch_records_summer[which(monarch_records_summer$long > -113.5 & monarch_records_summer$long < -105 & monarch_records_summer$lat >45 & monarch_records_summer$lat < 60),]$east.west <- 'east'
monarch_records_summer[which(monarch_records_summer$long > -114 & monarch_records_summer$long < -112 & monarch_records_summer$lat<47 & monarch_records_summer$lat > 45),]$east.west <- 'west'
monarch_records_summer[which(monarch_records_summer$long > -106 & monarch_records_summer$long < -104 & monarch_records_summer$lat<41 & monarch_records_summer$lat >39 ),]$east.west <- 'east'
monarch_records_summer$resident <- ifelse(monarch_records_summer$lat < 31, 'resident', 'non-resident')
monarch_records_summer[monarch_records_summer$lat < 34 & monarch_records_summer$lat > 32 & monarch_records_summer$long < -116 & monarch_records_summer$long > -119 ,]$resident <- 'resident'
monarch_records_summer[monarch_records_summer$lat > 32 & monarch_records_summer$lat < 35 &
monarch_records_summer$long < -75 & monarch_records_summer$long > -80.8,]$resident <- 'resident'
monarch_records_summer[monarch_records_summer$lat < 31 & monarch_records_summer$lat > 28 & monarch_records_summer$long < -97 & monarch_records_summer$long > -105,]$resident <- 'non-resident'
ggplot(monarch_records_summer[monarch_records_summer$resident!='resident',], aes(x = BIO18...Precipitation.of.Warmest.Quarter, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='west',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='east',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('BIO18 - Precipitation of Warmest Quarter')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
ggplot(monarch_records_summer[monarch_records_summer$resident!='resident',], aes(x = BIO10 = Mean Temperature of Warmest Quarter, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='west',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='east',]$BIO18...Precipitation.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('BIO10 = Mean Temperature of Warmest Quarter')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
monarch_records_summer$BIO10...Mean.Temperature.of.Warmest.Quarter
ggplot(monarch_records_summer[monarch_records_summer$resident!='resident',], aes(x = BIO10...Mean.Temperature.of.Warmest.Quarter, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='west',]$BIO10...Mean.Temperature.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_vline(xintercept = median(monarch_records_summer[monarch_records_summer$east.west=='east',]$BIO10...Mean.Temperature.of.Warmest.Quarter, na.rm=T), col = 'black', lty = 2)+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('BIO10 = Mean Temperature of Warmest Quarter')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
aggregate(BIO10...Mean.Temperature.of.Warmest.Quarter ~ east.west, FUN = mean, data = monarch_records_summer)
aggregate(BIO10...Mean.Temperature.of.Warmest.Quarter ~ east.west, FUN = sd, data = monarch_records_summer)
aggregate(BIO10...Mean.Temperature.of.Warmest.Quarter ~ east.west, FUN = mean, data = monarch_records_summer[monarch_records_summer$resident == 'non-resident',])
median(monarch_records_summer[monarch_records_summer$east.west=='west',]$BIO10...Mean.Temperature.of.Warmest.Quarter, na.rm=T)
median(monarch_records_summer[monarch_records_summer$east.west=='east',]$BIO10...Mean.Temperature.of.Warmest.Quarter, na.rm=T)
ggplot(monarch_records_summer[monarch_records_summer$resident!='resident',], aes(x = BIO10...Mean.Temperature.of.Warmest.Quarter, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('BIO10 = Mean Temperature of Warmest Quarter')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
aggregate(BIO10...Mean.Temperature.of.Warmest.Quarter ~ east.west, FUN = mean, data = monarch_records_summer[monarch_records_summer$resident == 'non-resident',])
prism_monarchs <- monarch_records_summer[monarch_records_summer$resident=='non-resident',]
nrow(prism_monarchs)
plot(north_am, xlim=range(-130,-35), ylim = range(-15,50))
points(prism_monarchs$longitude,prism_monarchs$latitude,col='blue',cex=1,pch=20)
points(prism_monarchs$longitude,prism_monarchs$latitude,col=as.factor(east.west),cex=1,pch=20)
points(prism_monarchs$longitude,prism_monarchs$latitude,col=factor(east.west),cex=1,pch=20)
prism_monarchs$east.west
points(prism_monarchs$longitude,prism_monarchs$latitude,col=prism_monarchs$east.west,cex=1,pch=20)
points(prism_monarchs$longitude,prism_monarchs$latitude,col=prism_monarchs$east.west,cex=1,pch=20)
points(prism_monarchs$longitude,prism_monarchs$latitude,col=1:length(prism_monarchs$east.west),cex=1,pch=20)
points(prism_monarchs$longitude,prism_monarchs$latitude,col=c('blue','orange')(prism_monarchs$east.west),cex=1,pch=20)
points(prism_monarchs$longitude,prism_monarchs$latitude,col=c('blue','orange')[prism_monarchs$east.west],cex=1,pch=20)
plot(north_am, xlim=range(-130,-35), ylim = range(-15,50))
points(prism_monarchs$longitude,prism_monarchs$latitude,col=c('blue','orange')[prism_monarchs$east.west],cex=1,pch=20)
points(prism_monarchs$longitude,prism_monarchs$latitude,col=c('blue','orange')[factor(prism_monarchs$east.west)],cex=1,pch=20)
library(rworldmap)
library(maps)
map.where(database = 'world', prism_monarchs$longitude, prism_monarchs$latitude)
prism_monarchs$country <- map.where(database = 'world', prism_monarchs$longitude, prism_monarchs$latitude)
gsub(":.*$", "", prism_monarchs$country)
prism_monarchs$country <- gsub(":.*$", "", prism_monarchs$country)
which(is.na(prism_monarchs$country))
monarchs_pupae$id_please
names(monarchs_pupae)
prism_monarchs[which(is.na(prism_monarchs$country)),]
prism_monarchs[which(is.na(prism_monarchs$country)),]$latitude
prism_monarchs$latitude
hist(prism_monarchs$latitude)
hist(prism_monarchs$latitude, breaks = 20)
hist(prism_monarchs$latitude, breaks = 25)
hist(prism_monarchs$latitude, breaks = 30)
hist(prism_monarchs$latitude, breaks = 40)
prism_monarchs$country
prism_monarchs[which(is.na(prism_monarchs$country)),]
coords2country = function(points)
{
countriesSP <- getMap(resolution='low')
#countriesSP <- getMap(resolution='high') #you could use high res map from rworldxtra if you were concerned about detail
# convert our list of points to a SpatialPoints object
# pointsSP = SpatialPoints(points, proj4string=CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
#setting CRS directly to that from rworldmap
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
# return the ADMIN names of each country
indices$ADMIN
#indices$ISO3 # returns the ISO3 code
#indices$continent   # returns the continent (6 continent model)
#indices$REGION   # returns the continent (7 continent model)
}
coords2country(cbind(prism_monarchs$longitude, prism_monarchs$latitude))
prism_monarchs$country <- coords2country(cbind(prism_monarchs$longitude, prism_monarchs$latitude))
which(is.na(prism_monarchs$country))
prism_monarchs[82,]
prism_monarchs$country <- gsub(":.*$", "", prism_monarchs$country)
prism_monarchs <- na.omit(prism_monarchs)
nrow(prism_monarchs)
aggregate(BIO10...Mean.Temperature.of.Warmest.Quarter ~ east.west, FUN = mean, data = prism_monarchs) #no real difference when looking at mean temperature of warmest quarter, although this also takes into account night-time low temperatures
canadian.records <- prism_monarchs[prism_monarchs$country=='Canada',]
nrow(canadian.records)
prism_monarchs <- prism_monarchs[prism_monarchs$month %in% c(7,8),]
canadian.records <- prism_monarchs[prism_monarchs$country=='Canada',]
nrow(canadian.records)
setwd('./PRISM_tmax_30yr_normal_4kmM2_all_bil/')
get_prism_normals(type = 'tmax', resolution = '4km', mon = 7:8, keepZip = TRUE) #get 4km resolution data for July and August
ls_prism_data() #first two entries are the ones containing the 30 year normals for July and August, respectively
prism_archive_ls() #first two entries are the ones containing the 30 year normals for July and August, respectively
prism_image(ls_prism_data()[1,1]) ###this shows 30 year normals for July
pd_image(ls_prism_data()[1,1]) ###this shows 30 year normals for July
pd_image(prism_archive_ls()[2,1]) #same for August
pd_image(prism_archive_ls()[2,1]) #same for August
pd_image(prism_archive_ls()[1,1]) ###this shows 30 year normals for July
pd_image(ls_prism_data()[1,1]) ###this shows 30 year normals for July
pd_image(ls_prism_data()[2,1]) #same for August
names(prism_monarchs)
prism.monarchs.coords <- prism_monarchs[,c(5,6)]
names(prism.monarchs.coords) <- c('long','lat')
prism.monarchs.coords
prism.monarchs.coords <- prism_monarchs[,c(6,6)]
prism.monarchs.coords <- prism_monarchs[,c(6,5)]
names(prism.monarchs.coords) <- c('long','lat')
prism.monarchs.coords
mystack <- ls_prism_data()[c(1,2),1] %>%  prism_stack(.)
mycrs <- mystack@crs@projargs
coordinates(prism.monarchs.coords) <- c('long','lat')
proj4string(prism.monarchs.coords) <- CRS(mycrs)
data <- data.frame(coordinates(prism.monarchs.coords), extract(mystack, prism.monarchs.coords))
names(data)[3:4] <- c('July_Normals_Tmax', 'August_Normals_Tmax')
###### now load all Canadian data
ontario <- read.csv('~/Downloads/climate-normals-ontario.csv')
quebec <- read.csv('~/Downloads/climate-normals-quebec.csv')
alberta <- read.csv('~/Downloads/climate-normals-alberta.csv')
saskatchewan <- read.csv('~/Downloads/climate-normals-saskatchewan.csv')
bc <- read.csv('~/Downloads/climate-normals-BC.csv')
manitoba <- read.csv('~/Downloads/climate-normals-manitoba.csv')
new_brunswick <- read.csv('~/Downloads/climate-normals-new_brunswick.csv')
newfoundland <- read.csv('~/Downloads/climate-normals-newfoundland.csv')
nova_scotia <- read.csv('~/Downloads/climate-normals-nova_scotia.csv')
prince_edward <- read.csv('~/Downloads/climate-normals-prince_edward.csv')
canada <- rbind(ontario,quebec,alberta,saskatchewan,bc,manitoba,new_brunswick,newfoundland,nova_scotia,prince_edward)
nrow(canada) #over 560,000 lines of data
#restrict to only the necessary elements: tmax in July and August, latitude, longitude (maybe also keep station ID info)
names(canada)
columns.keep <- c('x','y','STATION_NAME','PROVINCE_CODE','E_NORMAL_ELEMENT_NAME','MONTH','VALUE')
canada.keep <- canada[,columns.keep]
levels(canada.keep$E_NORMAL_ELEMENT_NAME) #want to save entries for 'Mean daily max temperature deg C' and 'Mean daily min temperature deg C', as well as months 7 and 8 (july and august)
canada.keep <- canada.keep[canada.keep$E_NORMAL_ELEMENT_NAME %in% c("Mean daily max temperature deg C","Mean daily min temperature deg C") & canada.keep$MONTH %in% c(7,8),]
nrow(canada.keep) #restricts data to 2512 entries; corresponds to data for 628 stations (out of 686 total)
head(canada.keep)
names(canada.keep)[c(1,2)] <- c('longitude','latitude')
prism_monarchs_canada <- prism_monarchs[prism_monarchs$country=='Canada',]
names(prism_monarchs_canada)
HavMat <- distm(prism_monarchs[,c('longitude','latitude')], canada.keep[,c('longitude','latitude')], fun=distHaversine)
prism_monarchs_canada$STATION_NAME <- prism_monarchs_canada$STATION_NAME[max.col(-HavMat)]
use.canada <- merge(prism_monarchs_canada, canada.keep[,c(3,4,5,7)], by = 'STATION_NAME')
prism_monarchs_canada
prism_monarchs_canada$STATION_NAME <- prism_monarchs_canada$STATION_NAME[max.col(-HavMat)]
HavMat
prism_monarchs_canada$STATION_NAME[max.col(-HavMat)]
canada <- rbind(ontario,quebec,alberta,saskatchewan,bc,manitoba,new_brunswick,newfoundland,nova_scotia,prince_edward)
nrow(canada) #over 560,000 lines of data
names(canada)
columns.keep <- c('x','y','STATION_NAME','PROVINCE_CODE','E_NORMAL_ELEMENT_NAME','MONTH','VALUE')
canada.keep <- canada[,columns.keep]
levels(canada.keep$E_NORMAL_ELEMENT_NAME) #want to save entries for 'Mean daily max temperature deg C' and 'Mean daily min temperature deg C', as well as months 7 and 8 (july and august)
canada.keep <- canada.keep[canada.keep$E_NORMAL_ELEMENT_NAME %in% c("Mean daily max temperature deg C","Mean daily min temperature deg C") & canada.keep$MONTH %in% c(7,8),]
nrow(canada.keep) #restricts data to 2512 entries; corresponds to data for 628 stations (out of 686 total)
head(canada.keep)
names(canada.keep)[c(1,2)] <- c('longitude','latitude')
gbif.canada <- gbif[gbif$countryCode=='CA' & gbif$month %in% c(7,8),]
##set working directory
setwd('~/Documents/grad_school/Manuscripts/Perspective piece/analysis/')
#### load gbif data: dataset ID is here -- https://doi.org/10.15468/dl.jx7wck
#start_time <- Sys.time()
gbif.monarchs <- read.csv('./monarchs_gbif.csv') #be patient: file is 92 Mb and contains over 212,000 records; takes about 10 seconds to load
#end_time <- Sys.time()
#start_time - end_time
names(gbif.monarchs) #45 columns included in GBIF dataset; pare down to only what is necessary
cols.save <- c('gbifID','countryCode','decimalLatitude','decimalLongitude','coordinatePrecision','elevation','eventDate','day','month','year')
gbif <- gbif.monarchs[,cols.save]
##set working directory
setwd('~/Documents/grad_school/Manuscripts/Perspective piece/analysis/')
#### load gbif data: dataset ID is here -- https://doi.org/10.15468/dl.jx7wck
#start_time <- Sys.time()
gbif.monarchs <- read.csv('./monarchs_gbif.csv') #be patient: file is 92 Mb and contains over 212,000 records; takes about 10 seconds to load
canada <- rbind(ontario,quebec,alberta,saskatchewan,bc,manitoba,new_brunswick,newfoundland,nova_scotia,prince_edward)
nrow(canada) #over 560,000 lines of data
names(canada)
columns.keep <- c('x','y','STATION_NAME','PROVINCE_CODE','E_NORMAL_ELEMENT_NAME','MONTH','VALUE')
canada.keep <- canada[,columns.keep]
levels(canada.keep$E_NORMAL_ELEMENT_NAME) #want to save entries for 'Mean daily max temperature deg C' and 'Mean daily min temperature deg C', as well as months 7 and 8 (july and august)
canada.keep <- canada.keep[canada.keep$E_NORMAL_ELEMENT_NAME %in% c("Mean daily max temperature deg C","Mean daily min temperature deg C") & canada.keep$MONTH %in% c(7,8),]
canada.keep
nrow(canada.keep) #restricts data to 2512 entries; corresponds to data for 628 stations (out of 686 total)
head(canada.keep)
names(canada.keep)[c(1,2)] <- c('longitude','latitude')
prism_monarchs_canada <- prism_monarchs[prism_monarchs$country=='Canada',]
HavMat <- distm(prism_monarchs[,c('longitude','latitude')], canada.keep[,c('longitude','latitude')], fun=distHaversine)
head(HavMat)
canada.keep$STATION_NAME[max.col(-HavMat)]
prism_monarchs_canada$STATION_NAME
prism_monarchs_canada$STATION_NAME <- prism_monarchs_canada$STATION_NAME[max.col(-HavMat)]
prism_monarchs_canada$new.var <- prism_monarchs_canada$STATION_NAME[max.col(-HavMat)]
prism_monarchs_canada$STATION_NAME[max.col(-HavMat)]
prism_monarchs_canada <- prism_monarchs[prism_monarchs$country=='Canada',]
HavMat <- distm(prism_monarchs[,c('longitude','latitude')], canada.keep[,c('longitude','latitude')], fun=distHaversine)
head(HavMat)
prism_monarchs_canada$new.var <- prism_monarchs_canada$STATION_NAME[max.col(-HavMat)]
prism_monarchs_canada$new.var
prism_monarchs_canada$year2
prism_monarchs_canada$STATION_NAME[max.col(-HavMat)]
max.col(HavMat)
prism_monarchs_canada$STATION_NAME[max.col(HavMat)]
HavMat <- distm(prism_monarchs[,c('longitude','latitude')], canada.keep[,c('longitude','latitude')], fun=distHaversine)
head(canada.keep)
head(HavMat)
names(prism_monarchs_canada)
names(canada.keep)
d <- pointDistance(prism_monarchs_canada[,6:5], canada.keep[,1:2], lonlat=TRUE, allpairs=T)
i <- apply(d, 1, which.min)
i
canada.keep$STATION_NAME[i]
nrow(prism_monarchs_canada)
prism_monarchs_canada$STATION_NAME <- canada.keep$STATION_NAME[i]
use.canada <- merge(prism_monarchs_canada, canada.keep[,c(3,4,5,7)], by = 'STATION_NAME')
use.canada$E_NORMAL_ELEMENT_NAME <- droplevels(use.canada$E_NORMAL_ELEMENT_NAME)#drop unused climate variable levels
library(plyr)
use.canada$E_NORMAL_ELEMENT_NAME <- revalue(use.canada$E_NORMAL_ELEMENT_NAME, c("Mean daily max temperature deg C"="Tmax", "Mean daily min temperature deg C"="Tmin"))
head(use.canada)
use.canada$measure <- as.factor(paste(use.canada$month, use.canada$E_NORMAL_ELEMENT_NAME, sep = "_"))
dst <- dcast(use.canada, prism_monarchs_canada ~ E_NORMAL_ELEMENT_NAME, value.var = 'VALUE', fun.aggregate = mean) #takes the mean July and August temperature for each location, reports as Tmax, but still gives four records for each locatoin; aggregate again
use.canada$E_NORMAL_ELEMENT_NAME <- revalue(use.canada$E_NORMAL_ELEMENT_NAME, c("Mean daily max temperature deg C"="Tmax", "Mean daily min temperature deg C"="Tmin"))
use.canada$E_NORMAL_ELEMENT_NAME
use.canada
use.canada$id <- paste(use.canada$observed_on, use.canada$latitude)
dst <- dcast(use.canada, id ~ E_NORMAL_ELEMENT_NAME, value.var = 'VALUE', fun.aggregate = mean) #takes the mean July and August temperature for each location, reports as Tmax, but still gives four records for each locatoin; aggregate again
dst
use.canada[,c(2,4,5)]
dst
dst <- merge(dst, use.canada, by = 'id')
dst <- aggregate(Tmax ~ id + latitude + longitude, data = dst, FUN = mean)
dst
head(data)
fin.dat <- rbind(data, dst)
data
names(data)
names(dst)
dst$long <- dst$longitude
dst$lat <- dst$latitude
dst
nrow(data)
nrow(dst)
names(data)
data
nrow(na.omit(data))
data$summer.normal.high <- rowMeans(data[,c(3,4)], na.rm = T)
data$summer.normal.high
data = na.omit(data)
names(data)
names(dst)
data$Tmax <- rowMeans(data[,c(3,4)], na.rm = T)
names(data)[1:2] <- c('longitude','latitude')
names(data)
names(dst)
fin.dat <- rbind(data[,c(1,2,6)], dst[,c(1,2,4)])
data = data[,c(2,1,6)]
data
names(dst)
dst = dst[,c(2,3,4)]
dst
fin.dat <- rbind(data, dst)
fin.dat$east.west <- ifelse(fin.dat$long < -105, 'west', 'east')
fin.dat[which(fin.dat$long > -113.5 & fin.dat$long < -105 & fin.dat$lat >45 & fin.dat$lat < 60),]$east.west <- 'east'
fin.dat[which(fin.dat$long > -114 & fin.dat$long < -112 & fin.dat$lat<47 & fin.dat$lat > 45),]$east.west <- 'west'
fin.dat[which(fin.dat$long > -106 & fin.dat$long < -104 & fin.dat$lat<41 & fin.dat$lat >39 ),]$east.west <- 'east'
fin.dat$resident <- ifelse(fin.dat$lat < 31, 'resident', 'non-resident')
fin.dat[fin.dat$lat < 34 & fin.dat$lat > 32 & fin.dat$long < -116.5 & fin.dat$long > -119 ,]$resident <- 'resident'
fin.dat[fin.dat$lat > 32 & fin.dat$lat < 35 &
fin.dat$long < -75 & fin.dat$long > -80.8,]$resident <- 'resident'
fin.dat[fin.dat$lat < 31 & fin.dat$lat > 28 & fin.dat$long < -97 & fin.dat$long > -105,]$resident <- 'non-resident'
fin.dat[fin.dat$resident=='resident',]$east.west <- 'resident'
table(fin.dat$east.west) #looks right
fin.dat.plot <- droplevels(fin.dat[!fin.dat$east.west=='resident',])
fin.dat.plot$east.west <- as.factor(fin.dat.plot$east.west)
fin.dat.plot$east.west <- revalue(fin.dat.plot$east.west, c('east' = 'eastern', 'west' = 'western'))
ggplot(fin.dat.plot, aes(x = summer.normals, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_vline(xintercept = median(fin.dat.plot[fin.dat.plot$east.west=='western',]$summer.normals, na.rm=T), col = 'black', lty = 2)+
geom_vline(xintercept = median(fin.dat.plot[fin.dat.plot$east.west=='eastern',]$summer.normals, na.rm=T), col = 'black', lty = 2)+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('Maximum Daily Temperature (July - August) (°C)')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
ggplot(fin.dat.plot, aes(x = Tmax, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_vline(xintercept = median(fin.dat.plot[fin.dat.plot$east.west=='western',]$summer.normals, na.rm=T), col = 'black', lty = 2)+
geom_vline(xintercept = median(fin.dat.plot[fin.dat.plot$east.west=='eastern',]$summer.normals, na.rm=T), col = 'black', lty = 2)+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('Maximum Daily Temperature (July - August) (°C)')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
ggplot(fin.dat.plot, aes(x = Tmax, col = east.west))+
geom_density(aes(fill = east.west), adjust = 4, alpha = 0.2, size = 1)+
theme_bw()+
scale_color_manual(values = c('yellow','orange'))+
scale_fill_manual(values = c('yellow','orange'))+
geom_vline(xintercept = median(fin.dat.plot[fin.dat.plot$east.west=='western',]$Tmax, na.rm=T), col = 'black', lty = 2)+
geom_vline(xintercept = median(fin.dat.plot[fin.dat.plot$east.west=='eastern',]$Tmax, na.rm=T), col = 'black', lty = 2)+
geom_hline(yintercept=0, colour="white", size=1)+
theme(legend.title = element_blank(), legend.position = c(0.8,0.8))+
xlab('Maximum Daily Temperature (July - August) (°C)')+
theme(axis.text = element_text(size = 16), axis.title = element_text(size = 16))+
theme(legend.text = element_text(size = 16), legend.box.background = element_rect(colour = "black"))
aggregate(Tmax ~ east.west, mean, fin.dat.plot)
aggregate(Tmax ~ east.west, FUN = mean, fin.dat.plot)
library(ggplot2)
library(lme4)
library(lmerTest)
library(plyr)
library(ggmap)
library(mapproj)
library(car)
library(emmeans)
setwd('~/Documents/GitHub/Sites/manuscripts/Freedman_et_al_monarch_global_wing_morphology/data_and_analysis/')
wings = read.csv(file="./wings_04.25.20.csv",header=TRUE)
date.split <- t(sapply(wings$Collection_Date, function(x) substring(x, first=c(1,5,7), last=c(4,6,8))))
wings <- cbind(wings, (date.split))
names(wings)[names(wings) == c('1','2','3')] <- c('year','month','day')
setwd('~/Documents/GitHub/Sites/manuscripts/Freedman_et_al_monarch_global_wing_morphology/data_and_analysis/')
wings = read.csv(file="./wings_04.25.20.csv",header=TRUE)
wings = read.csv(file="./monarch_morphology_primary_analysis/wings_04.25.20.csv",header=TRUE)
wings$Collection
levels(wings$Collection)
levels(factor(wings$Collection))
wings[wings$Collection=='Harvard',]
write.csv(file = '~/Desktop/harvard.specimens.csv, wings[wings$Collection=='Harvard',], row.names = F)
write.csv(file = '~/Desktop/harvard_specimens.csv, wings[wings$Collection=='Harvard',], row.names = F)
write.csv('~/Desktop/harvard_specimens.csv, wings[wings$Collection=='Harvard',], row.names = F)
write.csv('~/Desktop/harvard_specimens.csv', wings[wings$Collection=='Harvard',], row.names = F)
write.csv('~/Desktop/harvard_specimens.csv', wings[wings$Collection=='Harvard',], row.names = F)
write.csv(wings[wings$Collection=='Harvard',], '~/Desktop/harvard_specimens.csv', row.names = F)
